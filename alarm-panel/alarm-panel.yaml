substitutions:
  device_name: alarm-panel

esphome:
  name: $device_name

esp32:
  board: wemos_d1_mini32
  framework:
    type: arduino
    
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

logger:

ota:

api:
  services:
    - service: play_sound
      variables:
        song_str: string
      then:
        - if:
            condition:
              rtttl.is_playing
            then:
              - rtttl.stop
        - rtttl.play:
            rtttl: !lambda 'return song_str;'
    - service: tag_scanning_ok
      then:
        - script.execute: script_tag_ok
    - service: tag_scanning_fail
      then:
        - script.execute: script_tag_fail

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23
  miso_pin: GPIO19
  
rc522_spi:
  cs_pin: GPIO21
  reset_pin: GPIO22
  on_tag:
    then:
      - lambda: |-
          id(txt_last_tag).publish_state(x);
      - homeassistant.tag_scanned: !lambda 'return x;'
      
output:
  - platform: ledc
    pin: GPIO26
    id: rtttl_out

light:
  - platform: neopixelbus
    variant: WS2812
    pin: GPIO17
    num_leds: 3
    type: GRB
    name: "${device_name} Sensor Light"
    id: sensor_light
    icon: mdi:led-variant-on
    default_transition_length: 0.4s
    color_correct: [50%, 50%, 50%]
    restore_mode: ALWAYS_OFF
    effects:
      - addressable_rainbow:
      - addressable_color_wipe:
      - addressable_scan:
      - addressable_twinkle:
      - addressable_random_twinkle:
      - addressable_fireworks:

rtttl:
  output: rtttl_out
  on_finished_playback:
    - if:
        condition:
          switch.is_on: switch_alarm_active
        then:
          - delay: 0.1s
          - rtttl.play: "siren:d=6,o=6,b=100:d,e,d,e,d,e"

switch:
  - platform: template
    name: "${device_name} Siren"
    id: switch_alarm_active
    icon: "mdi:toggle-switch-outline"
    turn_on_action:
      - switch.template.publish:
          id: switch_alarm_active
          state: ON

      - rtttl.play: "siren:d=6,o=6,b=100:d,e,d,e,d,e"

    turn_off_action:
      - switch.template.publish:
          id: switch_alarm_active
          state: OFF
      - rtttl.stop

text_sensor:
  - platform: template
    id: txt_last_tag
    name: "${device_name} Last Tag Scanned"
  - platform: homeassistant
    id: txt_alarm_state
    entity_id: alarm_control_panel.home_alarm
    on_value:
      - if:
          condition:
            text_sensor.state:
              id: txt_alarm_state
              state: 'armed_away'            
          then:
            script.execute: script_armed_away
      - if:
          condition:
            text_sensor.state:
              id: txt_alarm_state
              state: 'armed_home'            
          then:
            script.execute: script_armed_home
      - if:
          condition:
            text_sensor.state:
              id: txt_alarm_state
              state: 'arming'            
          then:
            script.execute: script_arming
      - if:
          condition:
            text_sensor.state:
              id: txt_alarm_state
              state: 'disarmed'            
          then:
            script.execute: script_disarmed
            
script:
  - id: script_tag_ok
    then:
      - if:
          condition:
            switch.is_on: switch_alarm_active
          then:
            - switch.turn_off: switch_alarm_active
 
      - rtttl.play: "tag_ok:d=20,o=5,b=100:c,g"
 
  - id: script_tag_fail
    then:
      - rtttl.play: "tag_ok:d=10,o=5,b=100:g,c"
  - id: script_armed_away
    then:
      - rtttl.play: "armed:d=32,o=5,b=100:c,c#,d#,e,f#,g#,a#,b"

  - id: script_armed_home
    then:
      - rtttl.play: "batman:d=8,o=5,b=180:b,b,a#,a#,a,a,a#,a#,b,b,a#,a#,a,a,a#,a#,4b,p,4b"

  - id: script_disarmed
    then:
      - rtttl.play: "disarmed:d=32,o=5,b=100:b,a#,g#,f#,e,d#,c#,c"

  - id: script_arming
    then:
      - rtttl.play: "arming:d=3,o=5,b=180:e,e,e,e,e,e,e,e,e,e"
  
