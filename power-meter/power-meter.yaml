substitutions:
  device_name: power-meter
  device_description: "Non invasive Power-Meter"  
  project_name: zenzay.power_meter
  pulse_rate: '1000.0'
  ntp_server: '10.25.8.1'

esphome:
  name: $device_name
  comment: $device_description
  project:
    name: $project_name
    version: "0.3.1"
  on_boot:
    priority: 600
    then:
      - lambda: |-
          id(restore_totals).execute();
          id(last_update) = millis();
  on_shutdown:
    priority: 100
    then:
      - lambda: |-
          id(save_totals).execute();
  

preferences:
  flash_write_interval: 0s

esp32:
  board: nodemcu-32s
  framework:
    type: arduino

logger:

api:

ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

globals:
  - id: last_update
    type: int
    restore_value: no
    initial_value: '0'

  - id: power_usage_total
    type: float
    restore_value: no
    initial_value: '0'
  - id: power_usage_daily
    type: float
    restore_value: no
    initial_value: '0'
  - id: power_usage_hourly
    type: float
    restore_value: no
    initial_value: '0'
  - id: power_cost_total
    type: float
    restore_value: no
    initial_value: '0'
  - id: power_cost_daily
    type: float
    restore_value: no
    initial_value: '0'
  - id: power_cost_hourly
    type: float
    restore_value: no
    initial_value: '0'
  - id: power_usage_total_save
    type: float
    restore_value: yes
    initial_value: '0'
  - id: power_cost_total_save
    type: float
    restore_value: yes
    initial_value: '0'

light:
  - platform: neopixelbus
    variant: WS2812
    pin: GPIO14
    num_leds: 1
    type: GRB
    #name: "${device_name} Sensor Led"
    id: sensor_led
    default_transition_length: 0s
    color_correct: [50%, 50%, 50%]
    restore_mode: ALWAYS_OFF

number:
  - platform: template
    id: set_new_total_usage
    name: '${device_name} Set Total Usage'
    unit_of_measurement: "kWh"
    icon: mdi:meter-electric
    optimistic: true
    mode: box
    min_value: 0
    max_value: 100000
    step: 0.001
    restore_value: no
    initial_value: 0
    entity_category: "config"
    on_value:
      lambda: |-
        id(power_usage_total) = x;

  - platform: template
    id: set_new_total_cost
    name: '${device_name} Set Total Cost'
    unit_of_measurement: "DKK"
    icon: mdi:cash-100
    optimistic: true
    mode: box
    min_value: 0
    max_value: 100000
    step: 0.001
    restore_value: no
    initial_value: 0
    entity_category: "config"
    on_value:
      lambda: |-
        id(power_cost_total) = x;

  - platform: template
    id: power_problem_level
    name: '${device_name} Power Problem Level'
    icon: mdi:alert
    optimistic: true
    unit_of_measurement: "kWh"
    mode: box
    min_value: 10
    max_value: 100000
    step: 1
    restore_value: no
    initial_value: 10000
    entity_category: "config"

  - platform: template
    id: price_per_kwh
    name: '${device_name} Price Per kWh'
    icon: mdi:cash-100
    unit_of_measurement: "DKK"
    optimistic: true
    mode: box
    min_value: 0
    max_value: 100
    step: 0.001
    restore_value: no
    initial_value: 1
    entity_category: "config"

button:
  - platform: factory_reset
    name: "${device_name} Factory Reset"

  - platform: template
    name: "${device_name} Reset totals"
    id: update_reset
    entity_category: "config"
    on_press:
      - lambda:
          id(power_usage_total) = 0;
          id(total_usage).publish_state(0);
          id(power_cost_total) == 0;
          id(total_cost).publish_state(0);

switch:
  - platform: template
    name: "${device_name} Enable LED"
    id: enable_led
    entity_category: "config"
    turn_on_action:
      lambda: |-
        id(enable_led).publish_state(true);
    turn_off_action:
      lambda: |-
        id(enable_led).publish_state(false);
        auto call = id(sensor_led).turn_off();
        call.perform();

binary_sensor:
  - platform: template
    name: "${device_name} Status"
    id: power_status
    device_class: problem

sensor:
  - platform: pulse_meter
    name: "${device_name} Usage Currently"
    id: power_pulse_meter
    unit_of_measurement: 'W'
    state_class: measurement
    device_class: power
    icon: mdi:flash-outline
    accuracy_decimals: 0
    pin: GPIO26
    internal_filter_mode: EDGE
    internal_filter: 100ms
    filters:
      - lambda: return x * 60.0;
    on_value:
      then:
        - lambda: |-
            id(process_power_usage)->execute(x);

  - platform: template
    name: "${device_name} Usage Total"
    id: total_usage
    unit_of_measurement: 'kWh'
    icon: mdi:meter-electric
    state_class: total_increasing
    device_class: energy
    accuracy_decimals: 3
    update_interval: never

  - platform: template
    name: "${device_name} Usage Today"
    id: daily_usage
    unit_of_measurement: 'kWh'
    icon: mdi:meter-electric
    state_class: total_increasing
    device_class: energy
    accuracy_decimals: 3
    update_interval: never

  - platform: template
    name: "${device_name} Usage This Hour"
    id: hourly_usage
    unit_of_measurement: 'kWh'
    icon: mdi:meter-electric
    state_class: total_increasing
    device_class: energy
    accuracy_decimals: 3
    update_interval: never

  - platform: template
    name: "${device_name} Cost Now Hourly"
    id: current_hourly_cost
    icon: mdi:cash-100
    unit_of_measurement: 'DKK'
    device_class: monetary
    update_interval: never

  - platform: template
    name: "${device_name} Cost Total"
    icon: mdi:cash-100
    id: total_cost
    unit_of_measurement: 'DKK'
    device_class: monetary
    update_interval: 60s
    lambda: return id(power_cost_total);

  - platform: template
    name: "${device_name} Cost Today"
    icon: mdi:cash-100
    id: daily_cost
    unit_of_measurement: 'DKK'
    device_class: monetary
    update_interval: 60s
    lambda: return id(power_cost_daily);

  - platform: template
    name: "${device_name} Cost This Hour"
    icon: mdi:cash-100
    id: hourly_cost
    unit_of_measurement: 'DKK'
    device_class: monetary
    update_interval: 60s
    lambda: return id(power_cost_hourly);

time:
  - platform: sntp
    id: sntp_time
    servers: $ntp_server    # my router
    on_time:
      - cron: '0 0 0 * * *' # every day at midnight
        then:
          lambda: |-
            id(power_usage_daily) = 0;
            id(power_cost_daily) = 0;
            id(daily_usage).publish_state(id(power_usage_daily));
            id(daily_cost).publish_state(id(power_cost_daily));
      - cron: '0 0 * * * *' # every hour
        then:
          lambda: |-
            id(save_totals)->execute();
            id(power_usage_hourly) = 0;
            id(power_cost_hourly) = 0;
            id(hourly_cost).publish_state(id(power_cost_hourly));
            id(hourly_usage).publish_state(id(power_usage_hourly));

script:
  - id: sensor_set_led
    mode: restart
    parameters:
      perc: float
    then:
      - lambda: |-
          float r;
          float g;
          float b = 0;
          if (perc < 0) {
            perc = 0;
          }
          if (perc > 100) {
            perc = 100;
          }
          if (perc < 50) {
            g = 1;
            r = floor(perc / 100 * 2);
          } else {
            r = 1;
            g = floor(1 - (perc / 100));
          }
          if (id(sensor_led).current_values.is_on()) {
            auto call = id(sensor_led).turn_off();
            call.perform();
            delay(200);
          }
          auto call = id(sensor_led).turn_on();
          call.set_brightness(0.4);
          // call.set_transition_length(1000);
          // call.set_color_mode(ColorMode::RGB_COLD_WARM_WHITE);
          call.set_rgb(r, g, b);
          call.perform();

  - id: process_power_usage
    mode: single
    parameters:
      x: float
    then:
      - lambda: |-
          const uint32_t now = millis();
          float delta_hours = (now - id(last_update)) / $pulse_rate / 60.0f / 60.0f;
          float energy = (delta_hours * x) / $pulse_rate;
          float cost = energy * id(price_per_kwh).state;

          id(power_usage_total) += energy;
          id(power_usage_daily) += energy;
          id(power_usage_hourly) += energy;
          id(power_cost_total) += cost;
          id(power_cost_daily) += cost;
          id(power_cost_hourly) += cost;

          id(total_usage).publish_state(id(power_usage_total));
          id(daily_usage).publish_state(id(power_usage_daily));
          id(hourly_usage).publish_state(id(power_usage_hourly));

          id(current_hourly_cost).publish_state(x / $pulse_rate * (id(price_per_kwh).state ));

          if (x > id(power_problem_level).state) {
            id(power_status).publish_state(true);
          } else {
            id(power_status).publish_state(false);
          }
          if (id(enable_led).state) {
            // percent of power problem level - x / id(power_problem_level).state * 100;
            id(sensor_set_led)->execute(x / id(power_problem_level).state * 100);
          }

          id(last_update) = now;

  - id: save_totals
    mode: single
    then:
      lambda: |-
        id(power_usage_total_save) = id(power_usage_total);
        id(power_cost_total_save) = id(power_cost_total);

  - id: restore_totals
    mode: single
    then:
      lambda: |-
        id(power_usage_total) = id(power_usage_total_save);
        id(power_cost_total) = id(power_cost_total_save);


