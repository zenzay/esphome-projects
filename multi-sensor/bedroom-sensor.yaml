substitutions:
  device_name: bedroom-sensor
  area_name: Bedroom
  pir_delay: "500ms"
  relay_delay: "4500ms"
  motion_delay: "5"

esphome:
  name: $device_name

esp8266:
  board: d1_mini

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

logger:

api:

ota:

i2c:
  sda: GPIO4
  scl: GPIO5
  scan: True

light:
  - platform: neopixelbus
    variant: WS2812
    pin: GPIO3
    num_leds: 3
    type: GRB
    name: "${device_name} Sensor Lights"
    id: sensor_lights
    default_transition_length: 0.3s
    color_correct: [50%, 50%, 50%]
    restore_mode: ALWAYS_OFF
    effects:
      - pulse:
      - strobe:
      - addressable_rainbow:
      - addressable_color_wipe:
      - addressable_scan:
      - addressable_twinkle:
      - addressable_fireworks:

button:
  - platform: template
    name: "${device_name} Update Light Level"
    on_press:
      then:
        - component.update: light_sensor

  - platform: template
    name: "${device_name} Auto-Light Start"
    on_press:
      then:
        - binary_sensor.template.publish:
            id: auto_light_active
            state: ON

  - platform: template
    name: "${device_name} Auto-Light Stop"
    on_press:
      then:
        - binary_sensor.template.publish:
            id: auto_light_active
            state: OFF
        - if:
            condition:
              binary_sensor.is_on: motion_sensor
            then:
              - binary_sensor.template.publish:
                  id: motion_sensor
                  state: OFF
        
number:
  - platform: template
    name: "${device_name} Ambient Threshold"
    id: ambient_light_threshold
    min_value: 0
    max_value: 100
    step: 0.1
    optimistic: true
    initial_value: 5
    mode: box
  - platform: template
    name: "${device_name} Motion Sensor Delay"
    id: motion_sensor_delay
    min_value: 5
    max_value: 100
    step: 1
    optimistic: true
    initial_value: 30
    mode: box


switch:
  - platform: template
    name: "${device_name} Motion Sensor Enabled"
    id: motion_sensor_enabled
    restore_mode: RESTORE_DEFAULT_ON
    turn_on_action:
      - switch.template.publish:
          id: motion_sensor_enabled
          state: ON
      - binary_sensor.template.publish:
          id: motion_sensor
          state: OFF
    turn_off_action:
      - switch.template.publish:
          id: motion_sensor_enabled
          state: OFF
      - binary_sensor.template.publish:
          id: motion_sensor
          state: OFF

  - platform: template
    name: "${device_name} Debug Lights Enabled"
    id: debug_enabled
    restore_mode: RESTORE_DEFAULT_OFF
    turn_on_action:
      - switch.template.publish:
          id: debug_enabled
          state: ON
      - light.turn_on: sensor_lights
      - delay: 500ms
      - light.turn_off: sensor_lights
      
    turn_off_action:
      - switch.template.publish:
          id: debug_enabled
          state: OFF
      - light.turn_off: sensor_lights

binary_sensor:
  - platform: gpio
    id: pir_sensor
    #name: "${area_name} PIR Sensor"
    internal: True
    device_class: motion
    pin:
      number: GPIO16
      inverted: False
      mode: INPUT_PULLDOWN
    filters:
      delayed_off: $pir_delay
    on_state:
      then:
        lambda: |-
          id(motion_sensor_relay).publish_state(x);

  - platform: template
    #name: "${area_name} Motion Sensor Relay"
    id: motion_sensor_relay
    internal: True
    filters:
      delayed_off: $relay_delay
    on_press:
      then:
        lambda: |-
          if (id(motion_sensor_enabled).state) {
            id(motion_sensor).publish_state(true);
          }
          if (id(debug_enabled).state) {
            id(sensor_led_on)->execute(0);
          }
    on_release:
      then:
        lambda: |-
          if (id(delay_motion_sensor_off).is_running()) {
            id(delay_motion_sensor_off).stop();
          }
          if (id(motion_sensor_enabled).state) {
            id(delay_motion_sensor_off).execute();
          }
          if (id(debug_enabled).state) {
            id(sensor_led_off)->execute(0);
          }

  - platform: template
    id: motion_sensor
    name: "${area_name} Motion Sensor"
    device_class: motion
    on_press:
      then:
        lambda: |-
          if (id(debug_enabled).state) {
            id(sensor_led_on)->execute(1);
          }
    on_release:
      then:
        lambda: |-
          if (id(debug_enabled).state) {
            id(sensor_led_off)->execute(1);
          }

  - platform: template
    name: "${area_name} Auto-Light Active"
    id: auto_light_active
    icon: mdi:lightbulb-auto
    on_press:
      then:
        lambda: |-
          if (id(debug_enabled).state) {
            id(sensor_led_on)->execute(2);
          }

    on_release:
      then:
        lambda: |-
          if (id(debug_enabled).state) {
            id(sensor_led_off)->execute(2);
          }

  - platform: template
    name: "${area_name} Ambient Light Low"
    id: ambient_light_low
    icon: mdi:brightness-3
    lambda: |-
      return (id(ambient_light).state < id(ambient_light_threshold).state);

sensor:
  - platform: bme280
    address: 0x76
    iir_filter: 4x
    update_interval: 60s
    temperature:
      id: temperature_raw
      name: "${area_name} Temperature Raw"
      on_value:
        then:
          - lambda: |-
              id(temperature).publish_state(x);
    pressure:
      id: pressure
      name: "${area_name} Pressure"
    humidity:
      id: humidity
      name: "${area_name} Humidity"

  - platform: template
    id: temperature
    update_interval: never
    unit_of_measurement: "Â°C"
    state_class: "measurement"
    device_class: "temperature"
    name: "${area_name} Temperature"
    filters:
    - calibrate_polynomial:
       degree: 2
       datapoints:
        - 0.0 -> 0.0
        - 18.6 -> 16.1
        - 20.8 -> 19.0

  - platform: adc
    id: light_sensor
    name: "${area_name} Light Sensor"
    unit_of_measurement: "V"
    update_interval: 300s
    pin: A0
    filters:
      - multiply: 3.3
      - median:
          window_size: 4
          send_every: 3
    on_value:
      then:
        lambda: |-
          id(ambient_light).publish_state(x * 33.33);

  - platform: template
    id: ambient_light
    name: "${area_name} Ambient Light"
    unit_of_measurement: "%"
    icon: mdi:brightness-7
    update_interval: never

script:
  - id: delay_motion_sensor_off
    mode: restart
    then:
      - delay: !lambda "return (id(motion_sensor_delay).state - $motion_delay ) * 1000;"
      - if:
          condition:
            binary_sensor.is_off: motion_sensor_relay
          then:
            - binary_sensor.template.publish:
                id: motion_sensor
                state: OFF

  - id: sensor_led_on
    parameters:
      index: int
    then:
      - light.addressable_set:
         id: sensor_lights
         range_from: !lambda return index;
         range_to: !lambda return index;
         red: 100%
         green: 80%
         blue: 70%
         color_brightness: 40%
  - id: sensor_led_off
    parameters:
      index: int  
    then:
      - light.addressable_set:
         id: sensor_lights
         range_from: !lambda return index;
         range_to: !lambda return index;
         red: 0%
         green: 0%
         blue: 0%
         color_brightness: 0%



